# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  # 公司私有的镜像仓库账号
  S_USERNAME: "xxx"
  # 公司私有的镜像仓库密码
  S_PASSWORD: "xxx"
  # 要推送的整个镜像名和版本号
  MY_IMAGE: "xxx.xxx.com:8081/xxx/xxx:1.0.0"
build-job:       # This job runs in the build stage, which runs first.
  stage: build
  image: maven:3.6.3-jdk-8-openj9
  script:
    - echo "Compiling the code..."
    - echo "Compile complete."
    # - mvn package -s ${MVN_SETTINGS_XML} ${MAVEN_OPTS}
    - pwd
    # - mvn $MAVEN_OPTS clean package -DskipTests=true package 

  only:
    # 只对master分支运行job
    - master
  artifacts:
    expire_in: 1 week
    paths:
      # 可以指定到某个文件(这里指定到了jar包)，或者整个target/目录
      - target/renren-fast.jar  
# unit-test-job:   # This job runs in the test stage.
#   stage: test    # It only starts when the job in the build stage completes successfully.
#   script:
#     - echo "Running unit tests... This will take about 60 seconds."
#     - sleep 60
#     - echo "Code coverage is 90%"

# lint-test-job:   # This job also runs in the test stage.
#   stage: test    # It can run at the same time as unit-test-job (in parallel).
#   script:
#     - echo "Linting code... This will take about 10 seconds."
#     - sleep 10
#     - echo "No lint issues found."

# deploy-job:      # This job runs in the deploy stage.
#   stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."


job_copy:
    image: docker
    stage: deploy
    before_script:
        - 'which ssh-agent || ( yum update -y && yum install openssh-client git -y ) '
        - eval $(ssh-agent -s)
        - echo $SSH_PRIVATE_KEY 
        - echo $SSH_PRIVATE_KEY  | tr -d '\r'
        - echo $SSH_PRIVATE_KEY  | tr -d '\r' | ssh-add -
        - mkdir -p ~/.ssh
        - chmod 700 ~/.ssh
        - ssh-keyscan  -p 28488  45.62.123.30 > ~/.ssh/known_hosts  //xxxx替换为远程服务器的地址
        - chmod 644 ~/.ssh/known_hosts
    script:
        - ssh -p 28488 45.62.123.30  \'touch /tmp/deploy1\'
        - scp -P 28488 -r target/* 45.62.123.30:/tmp/deploy1

job_deploy:
    image: docker
    stage: deploy
    script:
      - docker build -t appimages .
      - if [ $(docker ps -aq --filter name=app-container) ]; then docker rm -f app-container;fi
      - docker run -d -p 8080:80 --name app-container appimages
